/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.docs.accounts.model.impl;

import com.liferay.docs.accounts.model.Account;
import com.liferay.docs.accounts.model.AccountModel;
import com.liferay.docs.accounts.model.AccountSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Account service. Represents a row in the &quot;GB_Account&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.docs.accounts.model.AccountModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AccountImpl}.
 * </p>
 *
 * @author a616659
 * @see AccountImpl
 * @see com.liferay.docs.accounts.model.Account
 * @see com.liferay.docs.accounts.model.AccountModel
 * @generated
 */
@JSON(strict = true)
public class AccountModelImpl extends BaseModelImpl<Account>
	implements AccountModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a account model instance should use the {@link com.liferay.docs.accounts.model.Account} interface instead.
	 */
	public static final String TABLE_NAME = "GB_Account";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "accountId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "firstName", Types.VARCHAR },
			{ "familyName", Types.VARCHAR },
			{ "email", Types.VARCHAR },
			{ "birthday", Types.VARCHAR },
			{ "gender", Types.VARCHAR },
			{ "accountPassword", Types.VARCHAR },
			{ "maritalStatus", Types.VARCHAR },
			{ "interests", Types.VARCHAR },
			{ "educationLevel", Types.VARCHAR },
			{ "foreignLanguages", Types.VARCHAR },
			{ "profession", Types.VARCHAR },
			{ "preferences", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table GB_Account (uuid_ VARCHAR(75) null,accountId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,firstName VARCHAR(75) null,familyName VARCHAR(75) null,email VARCHAR(75) null,birthday VARCHAR(75) null,gender VARCHAR(75) null,accountPassword VARCHAR(75) null,maritalStatus VARCHAR(75) null,interests VARCHAR(75) null,educationLevel VARCHAR(75) null,foreignLanguages VARCHAR(75) null,profession VARCHAR(75) null,preferences VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table GB_Account";
	public static final String ORDER_BY_JPQL = " ORDER BY account.accountId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY GB_Account.accountId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.docs.accounts.model.Account"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.docs.accounts.model.Account"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.docs.accounts.model.Account"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;
	public static long UUID_COLUMN_BITMASK = 4L;
	public static long ACCOUNTID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Account toModel(AccountSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Account model = new AccountImpl();

		model.setUuid(soapModel.getUuid());
		model.setAccountId(soapModel.getAccountId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setFirstName(soapModel.getFirstName());
		model.setFamilyName(soapModel.getFamilyName());
		model.setEmail(soapModel.getEmail());
		model.setBirthday(soapModel.getBirthday());
		model.setGender(soapModel.getGender());
		model.setAccountPassword(soapModel.getAccountPassword());
		model.setMaritalStatus(soapModel.getMaritalStatus());
		model.setInterests(soapModel.getInterests());
		model.setEducationLevel(soapModel.getEducationLevel());
		model.setForeignLanguages(soapModel.getForeignLanguages());
		model.setProfession(soapModel.getProfession());
		model.setPreferences(soapModel.getPreferences());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Account> toModels(AccountSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Account> models = new ArrayList<Account>(soapModels.length);

		for (AccountSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.docs.accounts.model.Account"));

	public AccountModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _accountId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAccountId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _accountId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Account.class;
	}

	@Override
	public String getModelClassName() {
		return Account.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("accountId", getAccountId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("firstName", getFirstName());
		attributes.put("familyName", getFamilyName());
		attributes.put("email", getEmail());
		attributes.put("birthday", getBirthday());
		attributes.put("gender", getGender());
		attributes.put("accountPassword", getAccountPassword());
		attributes.put("maritalStatus", getMaritalStatus());
		attributes.put("interests", getInterests());
		attributes.put("educationLevel", getEducationLevel());
		attributes.put("foreignLanguages", getForeignLanguages());
		attributes.put("profession", getProfession());
		attributes.put("preferences", getPreferences());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long accountId = (Long)attributes.get("accountId");

		if (accountId != null) {
			setAccountId(accountId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String firstName = (String)attributes.get("firstName");

		if (firstName != null) {
			setFirstName(firstName);
		}

		String familyName = (String)attributes.get("familyName");

		if (familyName != null) {
			setFamilyName(familyName);
		}

		String email = (String)attributes.get("email");

		if (email != null) {
			setEmail(email);
		}

		String birthday = (String)attributes.get("birthday");

		if (birthday != null) {
			setBirthday(birthday);
		}

		String gender = (String)attributes.get("gender");

		if (gender != null) {
			setGender(gender);
		}

		String accountPassword = (String)attributes.get("accountPassword");

		if (accountPassword != null) {
			setAccountPassword(accountPassword);
		}

		String maritalStatus = (String)attributes.get("maritalStatus");

		if (maritalStatus != null) {
			setMaritalStatus(maritalStatus);
		}

		String interests = (String)attributes.get("interests");

		if (interests != null) {
			setInterests(interests);
		}

		String educationLevel = (String)attributes.get("educationLevel");

		if (educationLevel != null) {
			setEducationLevel(educationLevel);
		}

		String foreignLanguages = (String)attributes.get("foreignLanguages");

		if (foreignLanguages != null) {
			setForeignLanguages(foreignLanguages);
		}

		String profession = (String)attributes.get("profession");

		if (profession != null) {
			setProfession(profession);
		}

		String preferences = (String)attributes.get("preferences");

		if (preferences != null) {
			setPreferences(preferences);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getAccountId() {
		return _accountId;
	}

	@Override
	public void setAccountId(long accountId) {
		_accountId = accountId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getFirstName() {
		if (_firstName == null) {
			return StringPool.BLANK;
		}
		else {
			return _firstName;
		}
	}

	@Override
	public void setFirstName(String firstName) {
		_firstName = firstName;
	}

	@JSON
	@Override
	public String getFamilyName() {
		if (_familyName == null) {
			return StringPool.BLANK;
		}
		else {
			return _familyName;
		}
	}

	@Override
	public void setFamilyName(String familyName) {
		_familyName = familyName;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return StringPool.BLANK;
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_email = email;
	}

	@JSON
	@Override
	public String getBirthday() {
		if (_birthday == null) {
			return StringPool.BLANK;
		}
		else {
			return _birthday;
		}
	}

	@Override
	public void setBirthday(String birthday) {
		_birthday = birthday;
	}

	@JSON
	@Override
	public String getGender() {
		if (_gender == null) {
			return StringPool.BLANK;
		}
		else {
			return _gender;
		}
	}

	@Override
	public void setGender(String gender) {
		_gender = gender;
	}

	@JSON
	@Override
	public String getAccountPassword() {
		if (_accountPassword == null) {
			return StringPool.BLANK;
		}
		else {
			return _accountPassword;
		}
	}

	@Override
	public void setAccountPassword(String accountPassword) {
		_accountPassword = accountPassword;
	}

	@JSON
	@Override
	public String getMaritalStatus() {
		if (_maritalStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _maritalStatus;
		}
	}

	@Override
	public void setMaritalStatus(String maritalStatus) {
		_maritalStatus = maritalStatus;
	}

	@JSON
	@Override
	public String getInterests() {
		if (_interests == null) {
			return StringPool.BLANK;
		}
		else {
			return _interests;
		}
	}

	@Override
	public void setInterests(String interests) {
		_interests = interests;
	}

	@JSON
	@Override
	public String getEducationLevel() {
		if (_educationLevel == null) {
			return StringPool.BLANK;
		}
		else {
			return _educationLevel;
		}
	}

	@Override
	public void setEducationLevel(String educationLevel) {
		_educationLevel = educationLevel;
	}

	@JSON
	@Override
	public String getForeignLanguages() {
		if (_foreignLanguages == null) {
			return StringPool.BLANK;
		}
		else {
			return _foreignLanguages;
		}
	}

	@Override
	public void setForeignLanguages(String foreignLanguages) {
		_foreignLanguages = foreignLanguages;
	}

	@JSON
	@Override
	public String getProfession() {
		if (_profession == null) {
			return StringPool.BLANK;
		}
		else {
			return _profession;
		}
	}

	@Override
	public void setProfession(String profession) {
		_profession = profession;
	}

	@JSON
	@Override
	public String getPreferences() {
		if (_preferences == null) {
			return StringPool.BLANK;
		}
		else {
			return _preferences;
		}
	}

	@Override
	public void setPreferences(String preferences) {
		_preferences = preferences;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				Account.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Account.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Account toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Account)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AccountImpl accountImpl = new AccountImpl();

		accountImpl.setUuid(getUuid());
		accountImpl.setAccountId(getAccountId());
		accountImpl.setGroupId(getGroupId());
		accountImpl.setCompanyId(getCompanyId());
		accountImpl.setUserId(getUserId());
		accountImpl.setUserName(getUserName());
		accountImpl.setCreateDate(getCreateDate());
		accountImpl.setModifiedDate(getModifiedDate());
		accountImpl.setFirstName(getFirstName());
		accountImpl.setFamilyName(getFamilyName());
		accountImpl.setEmail(getEmail());
		accountImpl.setBirthday(getBirthday());
		accountImpl.setGender(getGender());
		accountImpl.setAccountPassword(getAccountPassword());
		accountImpl.setMaritalStatus(getMaritalStatus());
		accountImpl.setInterests(getInterests());
		accountImpl.setEducationLevel(getEducationLevel());
		accountImpl.setForeignLanguages(getForeignLanguages());
		accountImpl.setProfession(getProfession());
		accountImpl.setPreferences(getPreferences());

		accountImpl.resetOriginalValues();

		return accountImpl;
	}

	@Override
	public int compareTo(Account account) {
		long primaryKey = account.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Account)) {
			return false;
		}

		Account account = (Account)obj;

		long primaryKey = account.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		AccountModelImpl accountModelImpl = this;

		accountModelImpl._originalUuid = accountModelImpl._uuid;

		accountModelImpl._originalGroupId = accountModelImpl._groupId;

		accountModelImpl._setOriginalGroupId = false;

		accountModelImpl._originalCompanyId = accountModelImpl._companyId;

		accountModelImpl._setOriginalCompanyId = false;

		accountModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Account> toCacheModel() {
		AccountCacheModel accountCacheModel = new AccountCacheModel();

		accountCacheModel.uuid = getUuid();

		String uuid = accountCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			accountCacheModel.uuid = null;
		}

		accountCacheModel.accountId = getAccountId();

		accountCacheModel.groupId = getGroupId();

		accountCacheModel.companyId = getCompanyId();

		accountCacheModel.userId = getUserId();

		accountCacheModel.userName = getUserName();

		String userName = accountCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			accountCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			accountCacheModel.createDate = createDate.getTime();
		}
		else {
			accountCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			accountCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			accountCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		accountCacheModel.firstName = getFirstName();

		String firstName = accountCacheModel.firstName;

		if ((firstName != null) && (firstName.length() == 0)) {
			accountCacheModel.firstName = null;
		}

		accountCacheModel.familyName = getFamilyName();

		String familyName = accountCacheModel.familyName;

		if ((familyName != null) && (familyName.length() == 0)) {
			accountCacheModel.familyName = null;
		}

		accountCacheModel.email = getEmail();

		String email = accountCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			accountCacheModel.email = null;
		}

		accountCacheModel.birthday = getBirthday();

		String birthday = accountCacheModel.birthday;

		if ((birthday != null) && (birthday.length() == 0)) {
			accountCacheModel.birthday = null;
		}

		accountCacheModel.gender = getGender();

		String gender = accountCacheModel.gender;

		if ((gender != null) && (gender.length() == 0)) {
			accountCacheModel.gender = null;
		}

		accountCacheModel.accountPassword = getAccountPassword();

		String accountPassword = accountCacheModel.accountPassword;

		if ((accountPassword != null) && (accountPassword.length() == 0)) {
			accountCacheModel.accountPassword = null;
		}

		accountCacheModel.maritalStatus = getMaritalStatus();

		String maritalStatus = accountCacheModel.maritalStatus;

		if ((maritalStatus != null) && (maritalStatus.length() == 0)) {
			accountCacheModel.maritalStatus = null;
		}

		accountCacheModel.interests = getInterests();

		String interests = accountCacheModel.interests;

		if ((interests != null) && (interests.length() == 0)) {
			accountCacheModel.interests = null;
		}

		accountCacheModel.educationLevel = getEducationLevel();

		String educationLevel = accountCacheModel.educationLevel;

		if ((educationLevel != null) && (educationLevel.length() == 0)) {
			accountCacheModel.educationLevel = null;
		}

		accountCacheModel.foreignLanguages = getForeignLanguages();

		String foreignLanguages = accountCacheModel.foreignLanguages;

		if ((foreignLanguages != null) && (foreignLanguages.length() == 0)) {
			accountCacheModel.foreignLanguages = null;
		}

		accountCacheModel.profession = getProfession();

		String profession = accountCacheModel.profession;

		if ((profession != null) && (profession.length() == 0)) {
			accountCacheModel.profession = null;
		}

		accountCacheModel.preferences = getPreferences();

		String preferences = accountCacheModel.preferences;

		if ((preferences != null) && (preferences.length() == 0)) {
			accountCacheModel.preferences = null;
		}

		return accountCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(41);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", accountId=");
		sb.append(getAccountId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", firstName=");
		sb.append(getFirstName());
		sb.append(", familyName=");
		sb.append(getFamilyName());
		sb.append(", email=");
		sb.append(getEmail());
		sb.append(", birthday=");
		sb.append(getBirthday());
		sb.append(", gender=");
		sb.append(getGender());
		sb.append(", accountPassword=");
		sb.append(getAccountPassword());
		sb.append(", maritalStatus=");
		sb.append(getMaritalStatus());
		sb.append(", interests=");
		sb.append(getInterests());
		sb.append(", educationLevel=");
		sb.append(getEducationLevel());
		sb.append(", foreignLanguages=");
		sb.append(getForeignLanguages());
		sb.append(", profession=");
		sb.append(getProfession());
		sb.append(", preferences=");
		sb.append(getPreferences());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(64);

		sb.append("<model><model-name>");
		sb.append("com.liferay.docs.accounts.model.Account");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>accountId</column-name><column-value><![CDATA[");
		sb.append(getAccountId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>firstName</column-name><column-value><![CDATA[");
		sb.append(getFirstName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>familyName</column-name><column-value><![CDATA[");
		sb.append(getFamilyName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>email</column-name><column-value><![CDATA[");
		sb.append(getEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>birthday</column-name><column-value><![CDATA[");
		sb.append(getBirthday());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gender</column-name><column-value><![CDATA[");
		sb.append(getGender());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>accountPassword</column-name><column-value><![CDATA[");
		sb.append(getAccountPassword());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maritalStatus</column-name><column-value><![CDATA[");
		sb.append(getMaritalStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>interests</column-name><column-value><![CDATA[");
		sb.append(getInterests());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>educationLevel</column-name><column-value><![CDATA[");
		sb.append(getEducationLevel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>foreignLanguages</column-name><column-value><![CDATA[");
		sb.append(getForeignLanguages());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>profession</column-name><column-value><![CDATA[");
		sb.append(getProfession());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>preferences</column-name><column-value><![CDATA[");
		sb.append(getPreferences());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Account.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Account.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _accountId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _firstName;
	private String _familyName;
	private String _email;
	private String _birthday;
	private String _gender;
	private String _accountPassword;
	private String _maritalStatus;
	private String _interests;
	private String _educationLevel;
	private String _foreignLanguages;
	private String _profession;
	private String _preferences;
	private long _columnBitmask;
	private Account _escapedModel;
}